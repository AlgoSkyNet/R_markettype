
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # ----------------------------------------------------------------------------------------
> # R Script to score current period of each currency based on the newly entered data
> # ----------------------------------------------------------------------------------------
> 
> # Expected output: Table containing market type number for every of the 28 currency pairs
> library(tidyverse)
-- Attaching packages --------------------------------------- tidyverse 1.2.1 --
v ggplot2 2.2.1     v purrr   0.2.4
v tibble  1.3.4     v dplyr   0.7.4
v tidyr   0.7.2     v stringr 1.2.0
v readr   1.1.1     v forcats 0.2.0
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x dplyr::filter() masks stats::filter()
x dplyr::lag()    masks stats::lag()
> library(lubridate)

Attaching package: 'lubridate'

The following object is masked from 'package:base':

    date

> # Reading the data from the Sandbox
> sbx <- "C:/Program Files (x86)/FxPro - Terminal2/MQL4/Files"
> sbx_price <- file.path(sbx, "AI_CP15.csv")
> sbx_macd <- file.path(sbx, "AI_Macd15.csv")
> 
> #price <- read_csv(sbx_price, col_names = F)
> macd <- read_csv(sbx_macd, col_names = F, col_types = "cdddddddddddddddddddddddddddd")
> macd$X1 <- ymd_hms(macd$X1)
> 
> # once the data are there we can start the virtual machine and load all our models
> # later on we will need to perform one operation for every column
> 
> #1. Extract last 100 observations
> #2. Convert them to matrix
> #3. Load them to h2o
> #4. Score this dataset into each model and save model MSE
> #5. find the index of the lowest MSE
> #6. record market type for that column into the dataframe or vector
> 
> # once all columns are completed:
> #7. write the obtained result to the csv file back to sandbox
> 
> # Vector of currency pairs
> Pairs = c("EURUSD", "GBPUSD", "AUDUSD", "NZDUSD", "USDCAD", "USDCHF", "USDJPY",
+           "EURGBP", "EURJPY", "EURCHF", "EURNZD", "EURCAD", "EURAUD", "GBPAUD",
+           "GBPCAD", "GBPCHF", "GBPJPY", "GBPNZD", "AUDCAD", "AUDCHF", "AUDJPY",
+           "AUDNZD", "CADJPY", "CHFJPY", "NZDJPY", "NZDCAD", "NZDCHF", "CADCHF")   
> 
> # Prepare data frame with last 100 observations and remove date/time column
> macd_100 <- macd %>% select(c(X2:X29)) %>% head(32)
> 
> # Rename the column?
> names(macd_100) <- Pairs
> 
> # # Solve for one
> # X <- macd_100 %>% select(EURUSD)
> # 
> # source("to_m.R")
> # X_m <- to_m(X, 32) %>% as.data.frame()
> # colnames(X_m) <- c(paste("X",1:32,sep=""))
> # load the virtual machine
> library(h2o)

----------------------------------------------------------------------

Your next step is to start H2O:
    > h2o.init()

For H2O package documentation, ask for help:
    > ??h2o

After starting H2O, you can use the Web UI at http://localhost:54321
For more information visit http://docs.h2o.ai

----------------------------------------------------------------------


Attaching package: 'h2o'

The following objects are masked from 'package:lubridate':

    day, hour, month, week, year

The following objects are masked from 'package:stats':

    cor, sd, var

The following objects are masked from 'package:base':

    %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,
    colnames<-, ifelse, is.character, is.factor, is.numeric, log,
    log10, log1p, log2, round, signif, trunc

> 
> # initialize the virtual machine
> h2o.init()

H2O is not running yet, starting it now...

Note:  In case of errors look at the following log files:
    C:\Users\fxtrams\AppData\Local\Temp\RtmpothL5L/h2o_fxtrams_started_from_r.out
    C:\Users\fxtrams\AppData\Local\Temp\RtmpothL5L/h2o_fxtrams_started_from_r.err

java version "1.8.0_121"
Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)

Starting H2O JVM and connecting: . Connection successful!

R is connected to the H2O cluster: 
    H2O cluster uptime:         2 seconds 302 milliseconds 
    H2O cluster version:        3.16.0.2 
    H2O cluster version age:    29 days  
    H2O cluster name:           H2O_started_from_R_fxtrams_rjh962 
    H2O cluster total nodes:    1 
    H2O cluster total memory:   1.77 GB 
    H2O cluster total cores:    4 
    H2O cluster allowed cores:  4 
    H2O cluster healthy:        TRUE 
    H2O Connection ip:          localhost 
    H2O Connection port:        54321 
    H2O Connection proxy:       NA 
    H2O Internal Security:      FALSE 
    H2O API Extensions:         Algos, AutoML, Core V3, Core V4 
    R Version:                  R version 3.4.3 (2017-11-30) 

> 
> market_type_num <- function(x){
+ # x is a 1 column dataframe containing 32 values
+ # Convert to matrix
+   source("to_m.R")
+   X_m <- to_m(x, 32) %>% as.data.frame()
+   colnames(X_m) <- c(paste("X",1:32,sep=""))
+ # load the dataset to h2o 
+ test  <- as.h2o(x = X_m, destination_frame = "test")
+ 
+ # load all models
+ m1 <- h2o.loadModel("models/regression.bin/DeepLearning_model_R_1514534458554_3") 
+ 
+ # retrieve the error on each
+ e1 <- h2o.predict(m1, test) 
+ 
+ # round the number to achieve class
+ result <- round(e1) %>% as.vector()
+ 
+ # manage negatives and/or bizzare numbers
+ if(result <= 0 || result > 6) {element <- -1} else {element <- result}
+ 
+ # output result of prediction from the function
+ return(element)
+ 
+ }
> 
> # test function
> #my_market <- market_type_num(x = X)
> 
> # test for all columns
> for (PAIR in Pairs) {
+   df <- macd_100 %>% select(PAIR)
+   my_market <- market_type_num(x = df) %>% as.data.frame()
+   names(my_market) <- PAIR
+   write_csv(my_market, file.path(sbx, paste0(PAIR, ".csv")))
+ }
Error in file(filename, "r", encoding = encoding) : 
  cannot open the connection
Calls: %>% -> eval -> eval -> market_type_num -> source -> file
In addition: Warning message:
In file(filename, "r", encoding = encoding) :
  cannot open file 'to_m.R': No such file or directory
Execution halted
